# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import calculater.calculater_pb2 as calculater__pb2


class CalculaterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetModelByPath = channel.unary_unary(
            "/calculater.Calculater/GetModelByPath",
            request_serializer=calculater__pb2.GetModelByPathRequest.SerializeToString,
            response_deserializer=calculater__pb2.GetModelByPathResponse.FromString,
        )
        self.Encode = channel.unary_unary(
            "/calculater.Calculater/Encode",
            request_serializer=calculater__pb2.EncodeRequest.SerializeToString,
            response_deserializer=calculater__pb2.EncodeResponse.FromString,
        )
        self.PreProcess = channel.unary_unary(
            "/calculater.Calculater/PreProcess",
            request_serializer=calculater__pb2.PreProcessRequest.SerializeToString,
            response_deserializer=calculater__pb2.PreProcessResponse.FromString,
        )
        self.RotrayEmb = channel.unary_unary(
            "/calculater.Calculater/RotrayEmb",
            request_serializer=calculater__pb2.RotrayEmbRequest.SerializeToString,
            response_deserializer=calculater__pb2.RotrayEmbResponse.FromString,
        )
        self.LoadModel = channel.unary_unary(
            "/calculater.Calculater/LoadModel",
            request_serializer=calculater__pb2.LoadModelRequest.SerializeToString,
            response_deserializer=calculater__pb2.LoadModelResponse.FromString,
        )
        self.Proj = channel.unary_unary(
            "/calculater.Calculater/Proj",
            request_serializer=calculater__pb2.ProjRequest.SerializeToString,
            response_deserializer=calculater__pb2.ProjResponse.FromString,
        )
        self.Score = channel.unary_unary(
            "/calculater.Calculater/Score",
            request_serializer=calculater__pb2.ScoreRequest.SerializeToString,
            response_deserializer=calculater__pb2.ScoreResponse.FromString,
        )
        self.FeedForward = channel.unary_unary(
            "/calculater.Calculater/FeedForward",
            request_serializer=calculater__pb2.FeedForwardRequest.SerializeToString,
            response_deserializer=calculater__pb2.FeedForwardResponse.FromString,
        )
        self.Out = channel.unary_unary(
            "/calculater.Calculater/Out",
            request_serializer=calculater__pb2.OutRequest.SerializeToString,
            response_deserializer=calculater__pb2.OutResponse.FromString,
        )


class CalculaterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetModelByPath(self, request, context):
        """请求服务器端本地 RPC"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Encode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PreProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RotrayEmb(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def LoadModel(self, request, context):
        """请求客户端本地 RPC"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Proj(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Score(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def FeedForward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Out(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CalculaterServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetModelByPath": grpc.unary_unary_rpc_method_handler(
            servicer.GetModelByPath,
            request_deserializer=calculater__pb2.GetModelByPathRequest.FromString,
            response_serializer=calculater__pb2.GetModelByPathResponse.SerializeToString,
        ),
        "Encode": grpc.unary_unary_rpc_method_handler(
            servicer.Encode,
            request_deserializer=calculater__pb2.EncodeRequest.FromString,
            response_serializer=calculater__pb2.EncodeResponse.SerializeToString,
        ),
        "PreProcess": grpc.unary_unary_rpc_method_handler(
            servicer.PreProcess,
            request_deserializer=calculater__pb2.PreProcessRequest.FromString,
            response_serializer=calculater__pb2.PreProcessResponse.SerializeToString,
        ),
        "RotrayEmb": grpc.unary_unary_rpc_method_handler(
            servicer.RotrayEmb,
            request_deserializer=calculater__pb2.RotrayEmbRequest.FromString,
            response_serializer=calculater__pb2.RotrayEmbResponse.SerializeToString,
        ),
        "LoadModel": grpc.unary_unary_rpc_method_handler(
            servicer.LoadModel,
            request_deserializer=calculater__pb2.LoadModelRequest.FromString,
            response_serializer=calculater__pb2.LoadModelResponse.SerializeToString,
        ),
        "Proj": grpc.unary_unary_rpc_method_handler(
            servicer.Proj,
            request_deserializer=calculater__pb2.ProjRequest.FromString,
            response_serializer=calculater__pb2.ProjResponse.SerializeToString,
        ),
        "Score": grpc.unary_unary_rpc_method_handler(
            servicer.Score,
            request_deserializer=calculater__pb2.ScoreRequest.FromString,
            response_serializer=calculater__pb2.ScoreResponse.SerializeToString,
        ),
        "FeedForward": grpc.unary_unary_rpc_method_handler(
            servicer.FeedForward,
            request_deserializer=calculater__pb2.FeedForwardRequest.FromString,
            response_serializer=calculater__pb2.FeedForwardResponse.SerializeToString,
        ),
        "Out": grpc.unary_unary_rpc_method_handler(
            servicer.Out,
            request_deserializer=calculater__pb2.OutRequest.FromString,
            response_serializer=calculater__pb2.OutResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "calculater.Calculater", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Calculater(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetModelByPath(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/calculater.Calculater/GetModelByPath",
            calculater__pb2.GetModelByPathRequest.SerializeToString,
            calculater__pb2.GetModelByPathResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Encode(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/calculater.Calculater/Encode",
            calculater__pb2.EncodeRequest.SerializeToString,
            calculater__pb2.EncodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PreProcess(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/calculater.Calculater/PreProcess",
            calculater__pb2.PreProcessRequest.SerializeToString,
            calculater__pb2.PreProcessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RotrayEmb(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/calculater.Calculater/RotrayEmb",
            calculater__pb2.RotrayEmbRequest.SerializeToString,
            calculater__pb2.RotrayEmbResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def LoadModel(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/calculater.Calculater/LoadModel",
            calculater__pb2.LoadModelRequest.SerializeToString,
            calculater__pb2.LoadModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Proj(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/calculater.Calculater/Proj",
            calculater__pb2.ProjRequest.SerializeToString,
            calculater__pb2.ProjResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Score(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/calculater.Calculater/Score",
            calculater__pb2.ScoreRequest.SerializeToString,
            calculater__pb2.ScoreResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def FeedForward(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/calculater.Calculater/FeedForward",
            calculater__pb2.FeedForwardRequest.SerializeToString,
            calculater__pb2.FeedForwardResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Out(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/calculater.Calculater/Out",
            calculater__pb2.OutRequest.SerializeToString,
            calculater__pb2.OutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
